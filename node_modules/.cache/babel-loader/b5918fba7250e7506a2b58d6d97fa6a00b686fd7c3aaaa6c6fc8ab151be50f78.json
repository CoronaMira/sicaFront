{"ast":null,"code":"// --- Service para API de datos ---\nexport const apiService = {\n  // --- Mocks para otras partes de la aplicación (se mantienen igual) ---\n  universityPersonnel: [{\n    id: 101,\n    name: 'Dr. Carlos Santana',\n    role: 'Rector',\n    registrationDate: '2023-01-15'\n  }, {\n    id: 102,\n    name: 'Lic. Maria Rodriguez',\n    role: 'Coordinadora Académica',\n    registrationDate: '2023-02-20'\n  }],\n  accessLogs: [{\n    id: 1,\n    userId: 2,\n    userName: 'Juan Perez',\n    date: '2024-07-26',\n    time: '08:01:15',\n    accessPoint: 'Entrada Principal',\n    status: 'Concedido'\n  }],\n  getPersonnel: async () => {\n    return new Promise(resolve => setTimeout(() => resolve([...apiService.universityPersonnel]), 300));\n  },\n  addPersonnel: async person => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const newPerson = {\n          ...person,\n          id: Date.now(),\n          registrationDate: new Date().toISOString().split('T')[0]\n        };\n        apiService.universityPersonnel.push(newPerson);\n        resolve(newPerson);\n      }, 500);\n    });\n  },\n  getVisitors: async () => {\n    // Esta lista ahora se manejará desde el backend, pero mantenemos el mock por si se usa en otra parte.\n    const mockVisitors = [{\n      id: 201,\n      name: 'CONGRESO-24-1',\n      reason: 'Congreso de IA',\n      validUntil: '2024-10-30'\n    }];\n    return new Promise(resolve => setTimeout(() => resolve(mockVisitors), 300));\n  },\n  getAccessLogs: async () => {\n    return new Promise(resolve => setTimeout(() => resolve([...apiService.accessLogs]), 300));\n  },\n  // --- Función Actualizada para Registrar Visitantes (Llamada Real a la API) ---\n  addVisitor: async visitorData => {\n    const url = 'http://localhost:8080/api/visits';\n    const apiKey = '652acf78-4544-4b51-9d6f-ebd6e49dea86';\n    console.log(\"Enviando datos a la API real:\", visitorData);\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-API-KEY': apiKey\n        },\n        body: JSON.stringify(visitorData)\n      });\n      if (!response.ok) {\n        // Si la respuesta no es exitosa, capturamos el error.\n        const errorData = await response.text();\n        throw new Error(`Error del servidor: ${response.status} - ${errorData}`);\n      }\n\n      // Si la respuesta es exitosa, la convertimos a JSON.\n      // Tu backend debería devolver el objeto de la visita creada, incluyendo el QR.\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error al realizar la llamada fetch a addVisitor:\", error);\n      // Re-lanzamos el error para que el componente (el formulario) pueda capturarlo y mostrar un mensaje.\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["apiService","universityPersonnel","id","name","role","registrationDate","accessLogs","userId","userName","date","time","accessPoint","status","getPersonnel","Promise","resolve","setTimeout","addPersonnel","person","newPerson","Date","now","toISOString","split","push","getVisitors","mockVisitors","reason","validUntil","getAccessLogs","addVisitor","visitorData","url","apiKey","console","log","response","fetch","method","headers","body","JSON","stringify","ok","errorData","text","Error","json","error"],"sources":["/Users/nayelicorona/Documents/UTN/cuatrimestre4/AplicacionesWeb/sica-proyect/src/services/apiService.js"],"sourcesContent":["// --- Service para API de datos ---\nexport const apiService = {\n    // --- Mocks para otras partes de la aplicación (se mantienen igual) ---\n    universityPersonnel: [\n        { id: 101, name: 'Dr. Carlos Santana', role: 'Rector', registrationDate: '2023-01-15' },\n        { id: 102, name: 'Lic. Maria Rodriguez', role: 'Coordinadora Académica', registrationDate: '2023-02-20' },\n    ],\n    accessLogs: [\n        { id: 1, userId: 2, userName: 'Juan Perez', date: '2024-07-26', time: '08:01:15', accessPoint: 'Entrada Principal', status: 'Concedido' },\n    ],\n    getPersonnel: async () => {\n        return new Promise(resolve => setTimeout(() => resolve([...apiService.universityPersonnel]), 300));\n    },\n    addPersonnel: async (person) => {\n        return new Promise(resolve => {\n            setTimeout(() => {\n                const newPerson = { ...person, id: Date.now(), registrationDate: new Date().toISOString().split('T')[0] };\n                apiService.universityPersonnel.push(newPerson);\n                resolve(newPerson);\n            }, 500);\n        });\n    },\n    getVisitors: async () => {\n        // Esta lista ahora se manejará desde el backend, pero mantenemos el mock por si se usa en otra parte.\n        const mockVisitors = [{ id: 201, name: 'CONGRESO-24-1', reason: 'Congreso de IA', validUntil: '2024-10-30' }];\n        return new Promise(resolve => setTimeout(() => resolve(mockVisitors), 300));\n    },\n    getAccessLogs: async () => {\n        return new Promise(resolve => setTimeout(() => resolve([...apiService.accessLogs]), 300));\n    },\n\n    // --- Función Actualizada para Registrar Visitantes (Llamada Real a la API) ---\n    addVisitor: async (visitorData) => {\n        const url = 'http://localhost:8080/api/visits';\n        const apiKey = '652acf78-4544-4b51-9d6f-ebd6e49dea86';\n\n        console.log(\"Enviando datos a la API real:\", visitorData);\n\n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-API-KEY': apiKey,\n                },\n                body: JSON.stringify(visitorData),\n            });\n\n            if (!response.ok) {\n                // Si la respuesta no es exitosa, capturamos el error.\n                const errorData = await response.text();\n                throw new Error(`Error del servidor: ${response.status} - ${errorData}`);\n            }\n\n            // Si la respuesta es exitosa, la convertimos a JSON.\n            // Tu backend debería devolver el objeto de la visita creada, incluyendo el QR.\n            return await response.json();\n\n        } catch (error) {\n            console.error(\"Error al realizar la llamada fetch a addVisitor:\", error);\n            // Re-lanzamos el error para que el componente (el formulario) pueda capturarlo y mostrar un mensaje.\n            throw error;\n        }\n    },\n};\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,UAAU,GAAG;EACtB;EACAC,mBAAmB,EAAE,CACjB;IAAEC,EAAE,EAAE,GAAG;IAAEC,IAAI,EAAE,oBAAoB;IAAEC,IAAI,EAAE,QAAQ;IAAEC,gBAAgB,EAAE;EAAa,CAAC,EACvF;IAAEH,EAAE,EAAE,GAAG;IAAEC,IAAI,EAAE,sBAAsB;IAAEC,IAAI,EAAE,wBAAwB;IAAEC,gBAAgB,EAAE;EAAa,CAAC,CAC5G;EACDC,UAAU,EAAE,CACR;IAAEJ,EAAE,EAAE,CAAC;IAAEK,MAAM,EAAE,CAAC;IAAEC,QAAQ,EAAE,YAAY;IAAEC,IAAI,EAAE,YAAY;IAAEC,IAAI,EAAE,UAAU;IAAEC,WAAW,EAAE,mBAAmB;IAAEC,MAAM,EAAE;EAAY,CAAC,CAC5I;EACDC,YAAY,EAAE,MAAAA,CAAA,KAAY;IACtB,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAAC,MAAMD,OAAO,CAAC,CAAC,GAAGf,UAAU,CAACC,mBAAmB,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;EACtG,CAAC;EACDgB,YAAY,EAAE,MAAOC,MAAM,IAAK;IAC5B,OAAO,IAAIJ,OAAO,CAACC,OAAO,IAAI;MAC1BC,UAAU,CAAC,MAAM;QACb,MAAMG,SAAS,GAAG;UAAE,GAAGD,MAAM;UAAEhB,EAAE,EAAEkB,IAAI,CAACC,GAAG,CAAC,CAAC;UAAEhB,gBAAgB,EAAE,IAAIe,IAAI,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QAAE,CAAC;QACzGvB,UAAU,CAACC,mBAAmB,CAACuB,IAAI,CAACL,SAAS,CAAC;QAC9CJ,OAAO,CAACI,SAAS,CAAC;MACtB,CAAC,EAAE,GAAG,CAAC;IACX,CAAC,CAAC;EACN,CAAC;EACDM,WAAW,EAAE,MAAAA,CAAA,KAAY;IACrB;IACA,MAAMC,YAAY,GAAG,CAAC;MAAExB,EAAE,EAAE,GAAG;MAAEC,IAAI,EAAE,eAAe;MAAEwB,MAAM,EAAE,gBAAgB;MAAEC,UAAU,EAAE;IAAa,CAAC,CAAC;IAC7G,OAAO,IAAId,OAAO,CAACC,OAAO,IAAIC,UAAU,CAAC,MAAMD,OAAO,CAACW,YAAY,CAAC,EAAE,GAAG,CAAC,CAAC;EAC/E,CAAC;EACDG,aAAa,EAAE,MAAAA,CAAA,KAAY;IACvB,OAAO,IAAIf,OAAO,CAACC,OAAO,IAAIC,UAAU,CAAC,MAAMD,OAAO,CAAC,CAAC,GAAGf,UAAU,CAACM,UAAU,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;EAC7F,CAAC;EAED;EACAwB,UAAU,EAAE,MAAOC,WAAW,IAAK;IAC/B,MAAMC,GAAG,GAAG,kCAAkC;IAC9C,MAAMC,MAAM,GAAG,sCAAsC;IAErDC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEJ,WAAW,CAAC;IAEzD,IAAI;MACA,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAG,EAAE;QAC9BM,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC,WAAW,EAAEN;QACjB,CAAC;QACDO,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACX,WAAW;MACpC,CAAC,CAAC;MAEF,IAAI,CAACK,QAAQ,CAACO,EAAE,EAAE;QACd;QACA,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIC,KAAK,CAAC,uBAAuBV,QAAQ,CAACxB,MAAM,MAAMgC,SAAS,EAAE,CAAC;MAC5E;;MAEA;MACA;MACA,OAAO,MAAMR,QAAQ,CAACW,IAAI,CAAC,CAAC;IAEhC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZd,OAAO,CAACc,KAAK,CAAC,kDAAkD,EAAEA,KAAK,CAAC;MACxE;MACA,MAAMA,KAAK;IACf;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}